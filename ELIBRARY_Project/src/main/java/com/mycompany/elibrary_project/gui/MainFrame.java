/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.elibrary_project.gui;

import com.mycompany.elibrary_project.model.Author;
import com.mycompany.elibrary_project.model.Book;
import com.mycompany.elibrary_project.model.Borrow;
import com.mycompany.elibrary_project.model.Genre;
import com.mycompany.elibrary_project.model.Language;
import com.mycompany.elibrary_project.model.Member;
import com.mycompany.elibrary_project.model.Staff;
import com.mycompany.elibrary_project.service.AuthorService;
import com.mycompany.elibrary_project.service.BookService;
import com.mycompany.elibrary_project.service.BorrowService;
import com.mycompany.elibrary_project.service.GenreService;
import com.mycompany.elibrary_project.service.LanguageService;
import com.mycompany.elibrary_project.service.MemberService;
import com.mycompany.elibrary_project.service.StaffService;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author user
 */
public class MainFrame extends javax.swing.JFrame {

    private AuthorService authorService;
    private GenreService genreService;
    private LanguageService languageService;
    private BookService bookService;
    private MemberService memberService;
    private StaffService staffService;
    private BorrowService borrowService;
    private String globBtnName = "";

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
    }

    public MainFrame(AuthorService authorService, GenreService genreService, LanguageService languageService, BookService bookService, MemberService memberService, StaffService staffService, BorrowService borrowService) {
        initComponents();
        this.authorService = authorService;
        this.genreService = genreService;
        this.languageService = languageService;
        this.bookService = bookService;
        this.memberService = memberService;
        this.staffService = staffService;
        this.borrowService = borrowService;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        EditBtn = new javax.swing.JButton();
        NewBtn = new javax.swing.JButton();
        DeleteBtn = new javax.swing.JButton();
        keywordTxt = new javax.swing.JTextField();
        searchBtn = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        AuthorBtn = new javax.swing.JButton();
        GenreBtn = new javax.swing.JButton();
        LanguageBtn = new javax.swing.JButton();
        BookBtn = new javax.swing.JButton();
        MemberBtn = new javax.swing.JButton();
        StaffBtn = new javax.swing.JButton();
        BorrowBtn = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        DataTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        EditBtn.setText("Edit");
        EditBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        EditBtn.setMaximumSize(new java.awt.Dimension(28, 20));
        EditBtn.setMinimumSize(new java.awt.Dimension(28, 20));
        EditBtn.setPreferredSize(new java.awt.Dimension(28, 20));
        EditBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditBtnActionPerformed(evt);
            }
        });

        NewBtn.setText("New");
        NewBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        NewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewBtnActionPerformed(evt);
            }
        });

        DeleteBtn.setText("Delete");
        DeleteBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        DeleteBtn.setMaximumSize(new java.awt.Dimension(28, 20));
        DeleteBtn.setMinimumSize(new java.awt.Dimension(28, 20));
        DeleteBtn.setPreferredSize(new java.awt.Dimension(28, 20));
        DeleteBtn.setRequestFocusEnabled(false);
        DeleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteBtnActionPerformed(evt);
            }
        });

        keywordTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keywordTxtActionPerformed(evt);
            }
        });
        keywordTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                keywordTxtKeyReleased(evt);
            }
        });

        searchBtn.setText("Search");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(NewBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(EditBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(DeleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 97, Short.MAX_VALUE)
                .addComponent(keywordTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(searchBtn)
                .addGap(34, 34, 34))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(25, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(EditBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NewBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DeleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(keywordTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchBtn))
                .addGap(21, 21, 21))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        AuthorBtn.setText("Author");
        AuthorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AuthorBtnActionPerformed(evt);
            }
        });

        GenreBtn.setText("Genre");
        GenreBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GenreBtnActionPerformed(evt);
            }
        });

        LanguageBtn.setText("Language");
        LanguageBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LanguageBtnActionPerformed(evt);
            }
        });

        BookBtn.setText("Book");
        BookBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BookBtnActionPerformed(evt);
            }
        });

        MemberBtn.setText("Member");
        MemberBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MemberBtnActionPerformed(evt);
            }
        });

        StaffBtn.setText("Staff");
        StaffBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StaffBtnActionPerformed(evt);
            }
        });

        BorrowBtn.setText("Borrow");
        BorrowBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BorrowBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(AuthorBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(GenreBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                    .addComponent(LanguageBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                    .addComponent(BookBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                    .addComponent(MemberBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                    .addComponent(StaffBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                    .addComponent(BorrowBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(AuthorBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(GenreBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LanguageBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BookBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MemberBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(StaffBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BorrowBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(145, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        DataTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        DataTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DataTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(DataTable);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void EditBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditBtnActionPerformed
        int rowIndex = DataTable.getSelectedRow(); // we will choose row we want to edit

        switch (globBtnName) {
            case "author": {
                if (rowIndex == -1) {
                    JOptionPane.showMessageDialog(null, "Please, select table row", "Warning", JOptionPane.WARNING_MESSAGE);
                }
                Long selectedRowId = (Long) DataTable.getValueAt(rowIndex, 0);
                EditAuthorFrame editAuthorFrame = new EditAuthorFrame(authorService, selectedRowId);
                editAuthorFrame.setVisible(true);
                break;
            }
            case "genre": {
                if (rowIndex == -1) {
                    JOptionPane.showMessageDialog(null, "Please, select table row", "Warning", JOptionPane.WARNING_MESSAGE);
                }
                Long selectedRowId = (Long) DataTable.getValueAt(rowIndex, 0);
                EditGenreFrame editGenreFrame = new EditGenreFrame(genreService, selectedRowId);
                editGenreFrame.setVisible(true);
                break;
            }
            case "language": {
                if (rowIndex == -1) {
                    JOptionPane.showMessageDialog(null, "Please, select table row", "Warning", JOptionPane.WARNING_MESSAGE);
                }
                Long selectedRowId = (Long) DataTable.getValueAt(rowIndex, 0);
                EditLanguageFrame editLanguageFrame = new EditLanguageFrame(languageService, selectedRowId);
                editLanguageFrame.setVisible(true);
                break;
            }
            case "book": {
                if (rowIndex == -1) {
                    JOptionPane.showMessageDialog(null, "Please, select table row", "Warning", JOptionPane.WARNING_MESSAGE);
                }
                Long selectedRowId = (Long) DataTable.getValueAt(rowIndex, 0);
                EditBookFrame editBookFrame = new EditBookFrame(bookService, languageService, genreService, authorService, selectedRowId);
                editBookFrame.setVisible(true);
                break;
            }
            case "member": {
                if (rowIndex == -1) {
                    JOptionPane.showMessageDialog(null, "Please, select table row", "Warning", JOptionPane.WARNING_MESSAGE);
                }
                Long selectedRowId = (Long) DataTable.getValueAt(rowIndex, 0);
                EditMemberFrame editMemberFrame = new EditMemberFrame(memberService, selectedRowId);
                editMemberFrame.setVisible(true);
                break;
            }
            case "staff": {
                if (rowIndex == -1) {
                    JOptionPane.showMessageDialog(null, "Please, select table row", "Warning", JOptionPane.WARNING_MESSAGE);
                }
                Long selectedRowId = (Long) DataTable.getValueAt(rowIndex, 0);
                EditStaffFrame editStaffFrame = new EditStaffFrame(staffService, selectedRowId);
                editStaffFrame.setVisible(true);
                break;
            }
            case "borrow": {
                if (rowIndex == -1) {
                    JOptionPane.showMessageDialog(null, "Please, select table row", "Warning", JOptionPane.WARNING_MESSAGE);
                }
                Long selectedRowId = (Long) DataTable.getValueAt(rowIndex, 0);
                EditBorrowFrame editBorrowFrame = new EditBorrowFrame(borrowService, bookService, memberService, staffService, selectedRowId);
                editBorrowFrame.setVisible(true);
                break;

            }

            default:
                JOptionPane.showMessageDialog(null, "Please, select menu", "Warning", JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_EditBtnActionPerformed

    private void NewBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewBtnActionPerformed
        switch (globBtnName) {
            case "author":
                NewAuthorFrame newAuthorFrame = new NewAuthorFrame(authorService);
                newAuthorFrame.setVisible(true);
                break;
            case "genre":
                NewGenreFrame newGenreFrame = new NewGenreFrame(genreService);
                newGenreFrame.setVisible(true);
                break;
            case "language":
                NewLanguageFrame newLanguageFrame = new NewLanguageFrame(languageService);
                newLanguageFrame.setVisible(true);
                break;
            case "book":
                NewBookFrame newBookFrame = new NewBookFrame(bookService, authorService, genreService, languageService);
                newBookFrame.setVisible(true);
                break;
            case "member":
                NewMemberFrame newMemberFrame = new NewMemberFrame(memberService);
                newMemberFrame.setVisible(true);
                break;
            case "staff":
                NewStaffFrame newStaffFrame = new NewStaffFrame(staffService);
                newStaffFrame.setVisible(true);
                break;
            case "borrow":
                NewBorrowFrame newBorrowFrame = new NewBorrowFrame(bookService, memberService, staffService, borrowService);
                newBorrowFrame.setVisible(true);
                break;

            default:
                JOptionPane.showMessageDialog(null, "Please, select menu", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_NewBtnActionPerformed

    private void DeleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteBtnActionPerformed
        int rowIndex = DataTable.getSelectedRow(); // we will choose row we want to edit

        try {
            switch (globBtnName) {
                case "author":
                    if (rowIndex == -1) {
                        JOptionPane.showMessageDialog(null, "Please, select table row", "Warning", JOptionPane.WARNING_MESSAGE);
                    } else {
                        Long selectedRowId = (Long) DataTable.getValueAt(rowIndex, 0);
                        Author author;
                        author = authorService.getAuthorById(selectedRowId);

                        int isDeleteMsg = JOptionPane.showConfirmDialog(null, "Are you sure to delete " + author.getName() + " " + author.getSurname() + "?", "Delete Author", JOptionPane.YES_NO_OPTION);
                        if (isDeleteMsg == JOptionPane.YES_OPTION) {
                            authorService.deleteAuthor(selectedRowId);
                            JOptionPane.showMessageDialog(null, "Author has been successfully deleted!");
                            showAuthorData(authorService.getAuthorList());
                        }
                    }
                    break;

                case "genre":
                    if (rowIndex == -1) {
                        JOptionPane.showMessageDialog(null, "Please, select table row", "Warning", JOptionPane.WARNING_MESSAGE);
                    } else {
                        Long selectedRowId = (Long) DataTable.getValueAt(rowIndex, 0);
                        Genre genre;
                        genre = genreService.getGenreById(selectedRowId);

                        int isDeleteMsg = JOptionPane.showConfirmDialog(null, "Are you sure to delete " + genre.getName() + "?", "Delete Genre", JOptionPane.YES_NO_OPTION);
                        if (isDeleteMsg == JOptionPane.YES_OPTION) {
                            genreService.deleteGenre(selectedRowId);
                            JOptionPane.showMessageDialog(null, "Genre has been successfully deleted!");
                            showGenreData(genreService.getGenreList());
                        }
                    }
                    break;
                case "language":
                    if (rowIndex == -1) {
                        JOptionPane.showMessageDialog(null, "Please, select table row", "Warning", JOptionPane.WARNING_MESSAGE);
                    } else {
                        Long selectedRowId = (Long) DataTable.getValueAt(rowIndex, 0);
                        Language language;
                        language = languageService.getLanguageById(selectedRowId);

                        int isDeleteMsg = JOptionPane.showConfirmDialog(null, "Are you sure to delete " + language.getName() + "?", "Delete Language", JOptionPane.YES_NO_OPTION);
                        if (isDeleteMsg == JOptionPane.YES_OPTION) {
                            languageService.deleteLanguage(selectedRowId);
                            JOptionPane.showMessageDialog(null, "Language has been successfully deleted!");
                            showLanguageData(languageService.getLanguageList());
                        }
                    }
                    break;
                case "book":
                    if (rowIndex == -1) {
                        JOptionPane.showMessageDialog(null, "Please, select table row", "Warning", JOptionPane.WARNING_MESSAGE);
                    } else {
                        Long selectedRowId = (Long) DataTable.getValueAt(rowIndex, 0);
                        Book book;
                        book = bookService.getBookById(selectedRowId);

                        int isDeleteMsg = JOptionPane.showConfirmDialog(null, "Are you sure to delete the book: " + book.getName() + "?", "Delete Book", JOptionPane.YES_NO_OPTION);
                        if (isDeleteMsg == JOptionPane.YES_OPTION) {
                            bookService.deleteBook(selectedRowId);
                            JOptionPane.showMessageDialog(null, "Book has been successfully deleted!");
                            showBookData(bookService.getBookList());
                        }
                    }
                    break;
                case "member":
                    if (rowIndex == -1) {
                        JOptionPane.showMessageDialog(null, "Please, select table row", "Warning", JOptionPane.WARNING_MESSAGE);
                    } else {
                        Long selectedRowId = (Long) DataTable.getValueAt(rowIndex, 0);
                        Member member;
                        member = memberService.getMemberById(selectedRowId);

                        int isDeleteMsg = JOptionPane.showConfirmDialog(null, "Are you sure to delete " + member.getName() + member.getSurname() + "?", "Delete Member", JOptionPane.YES_NO_OPTION);
                        if (isDeleteMsg == JOptionPane.YES_OPTION) {
                            memberService.deleteMember(selectedRowId);
                            JOptionPane.showMessageDialog(null, "Member has been successfully deleted!");
                            showMemberData(memberService.getMemberList());
                        }
                    }
                    break;
                case "staff":
                    if (rowIndex == -1) {
                        JOptionPane.showMessageDialog(null, "Please, select table row", "Warning", JOptionPane.WARNING_MESSAGE);
                    } else {
                        Long selectedRowId = (Long) DataTable.getValueAt(rowIndex, 0);
                        Staff staff;
                        staff = staffService.getStaffById(selectedRowId);

                        int isDeleteMsg = JOptionPane.showConfirmDialog(null, "Are you sure to delete " + staff.getName() + staff.getSurname() + "?", "Delete Staff", JOptionPane.YES_NO_OPTION);
                        if (isDeleteMsg == JOptionPane.YES_OPTION) {
                            staffService.deleteStaff(selectedRowId);
                            JOptionPane.showMessageDialog(null, "Staff has been successfully deleted!");
                            showStaffData(staffService.getStaffList());
                        }
                    }
                    break;
                case "borrow":
                    if (rowIndex == -1) {
                        JOptionPane.showMessageDialog(null, "Please, select table row", "Warning", JOptionPane.WARNING_MESSAGE);
                    } else {
                        Long selectedRowId = (Long) DataTable.getValueAt(rowIndex, 0);
                        Borrow borrow;
                        borrow = borrowService.getBorrowById(selectedRowId);

                        int isDeleteMsg = JOptionPane.showConfirmDialog(null, "Are you sure to delete the borrow record: " + borrow.getBook().getName() + " borrowed by " + borrow.getMember().getName() + "?", "Delete Borrow Record", JOptionPane.YES_NO_OPTION);
                        if (isDeleteMsg == JOptionPane.YES_OPTION) {
                            borrowService.deleteBorrow(selectedRowId);
                            JOptionPane.showMessageDialog(null, "Borrow record has been successfully deleted!");
                            showBorrowData(borrowService.getBorrowList());
                        }
                    }

                    break;

                default:
                    JOptionPane.showMessageDialog(null, "Please, select menu", "Warning", JOptionPane.WARNING_MESSAGE);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Author has not been deleted!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_DeleteBtnActionPerformed

    private void AuthorBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AuthorBtnActionPerformed
        try {
            showAuthorData(authorService.getAuthorList());
            globBtnName = "author";
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_AuthorBtnActionPerformed

    private void GenreBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GenreBtnActionPerformed
        try {
            showGenreData(genreService.getGenreList());
            globBtnName = "genre";
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_GenreBtnActionPerformed

    private void LanguageBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LanguageBtnActionPerformed
        try {
            showLanguageData(languageService.getLanguageList());
            globBtnName = "language";
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_LanguageBtnActionPerformed

    private void BookBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BookBtnActionPerformed
        try {
            showBookData(bookService.getBookList());
            globBtnName = "book";
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_BookBtnActionPerformed

    private void MemberBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MemberBtnActionPerformed
        try {
            showMemberData(memberService.getMemberList());
            globBtnName = "member";
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_MemberBtnActionPerformed

    private void StaffBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StaffBtnActionPerformed
        try {
            showStaffData(staffService.getStaffList());
            globBtnName = "staff";
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_StaffBtnActionPerformed

    private void BorrowBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BorrowBtnActionPerformed
        try {
            showBorrowData(borrowService.getBorrowList());
            globBtnName = "borrow";
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_BorrowBtnActionPerformed

    private void DataTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DataTableMouseClicked
        if (evt.getClickCount() == 2) {
            EditBtnActionPerformed(null); // when we are clicking some row twice we starting editing those data
        }
    }//GEN-LAST:event_DataTableMouseClicked

    private void keywordTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keywordTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_keywordTxtActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        String keyword = keywordTxt.getText();

        try {
            switch (globBtnName) {
                case "author":
                    List<Author> authorList = authorService.searchAuthorData(keyword);
                    showAuthorData(authorList);
                    break;

                case "genre":
                    List<Genre> genreList = genreService.searchGenreData(keyword);
                    showGenreData(genreList);
                    break;
                case "language":
                    List<Language> languageList = languageService.searchLanguageData(keyword);
                    showLanguageData(languageList);
                    break;
                case "book":
                    List<Book> bookList = bookService.searchBookData(keyword);
                    showBookData(bookList);
                    break;
                case "member":
                    List<Member> memberList = memberService.searchMemberData(keyword);
                    showMemberData(memberList);
                    break;
                case "staff":
                    List<Staff> staffList = staffService.searchStaffData(keyword);
                    showStaffData(staffList);
                    break;
                case "borrow":
                    List<Borrow> borrowList = borrowService.searchBorrowData(keyword);
                    showBorrowData(borrowList);
                    break;

                default:
                    JOptionPane.showMessageDialog(null, "Please, select menu", "Warning", JOptionPane.WARNING_MESSAGE);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Author has not been deleted!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_searchBtnActionPerformed

    private void keywordTxtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_keywordTxtKeyReleased
        searchBtnActionPerformed(null);
    }//GEN-LAST:event_keywordTxtKeyReleased

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AuthorBtn;
    private javax.swing.JButton BookBtn;
    private javax.swing.JButton BorrowBtn;
    private javax.swing.JTable DataTable;
    private javax.swing.JButton DeleteBtn;
    private javax.swing.JButton EditBtn;
    private javax.swing.JButton GenreBtn;
    private javax.swing.JButton LanguageBtn;
    private javax.swing.JButton MemberBtn;
    private javax.swing.JButton NewBtn;
    private javax.swing.JButton StaffBtn;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField keywordTxt;
    private javax.swing.JButton searchBtn;
    // End of variables declaration//GEN-END:variables

    private void showAuthorData(List<Author> authorList) {
        try {

            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }

            };
            DataTable.setModel(model);
            model.addColumn("№");
            model.addColumn("Name");
            model.addColumn("Surname");

            //List<Author> authorList = authorService.getAuthorList();
            for (Author author : authorList) {
                Object[] data = new Object[]{
                    author.getId(),
                    author.getName(),
                    author.getSurname()
                };
                model.addRow(data);
            }
            model.fireTableDataChanged();
        } catch (Exception ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void showGenreData(List<Genre> genreList) {
        try {

            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }

            };
            DataTable.setModel(model);
            model.addColumn("№");
            model.addColumn("Name");

            //List<Genre> genreList = genreService.getGenreList();
            for (Genre genre : genreList) {
                Object[] data = new Object[]{
                    genre.getId(),
                    genre.getName(),};
                model.addRow(data);
            }
            model.fireTableDataChanged();
        } catch (Exception ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void showLanguageData(List<Language> languageList) {
        try {

            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }

            };
            DataTable.setModel(model);
            model.addColumn("№");
            model.addColumn("Name");

            //List<Language> languageList = languageService.getLanguageList();
            for (Language language : languageList) {
                Object[] data = new Object[]{
                    language.getId(),
                    language.getName(),};
                model.addRow(data);
            }
            model.fireTableDataChanged();
        } catch (Exception ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void showBookData(List<Book> bookList) {
        try {

            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }

            };
            DataTable.setModel(model);
            model.addColumn("№");
            model.addColumn("Book name");
            model.addColumn("Autor name");
            model.addColumn("Genre");
            model.addColumn("Language");

            //List<Book> bookList = bookService.getBookList();
            for (Book book : bookList) {
                Object[] data = new Object[]{
                    book.getId(),
                    book.getName(),
                    book.getAuthor().getName() + " " + book.getAuthor().getSurname(),
                    book.getGenre().getName(),
                    book.getLanguage().getName()
                };
                model.addRow(data);
            }
            model.fireTableDataChanged();
        } catch (Exception ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void showMemberData(List<Member> memberList) {
        try {

            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }

            };
            DataTable.setModel(model);
            model.addColumn("№");
            model.addColumn("Name");
            model.addColumn("Phone");

            //List<Member> memberList = memberService.getMemberList();
            for (Member member : memberList) {
                Object[] data = new Object[]{
                    member.getId(),
                    member.getName() + " " + member.getSurname(),
                    member.getPhone()
                };
                model.addRow(data);
            }
            model.fireTableDataChanged();
        } catch (Exception ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void showStaffData(List<Staff> staffList) {
        try {

            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }

            };
            DataTable.setModel(model);
            model.addColumn("№");
            model.addColumn("Name");
            model.addColumn("Phone");

            //List<Staff> staffList = staffService.getStaffList();
            for (Staff staff : staffList) {
                Object[] data = new Object[]{
                    staff.getId(),
                    staff.getName() + " " + staff.getSurname(),
                    staff.getPhone()
                };
                model.addRow(data);
            }
            model.fireTableDataChanged();
        } catch (Exception ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void showBorrowData(List<Borrow> borrowList) {
        try {

            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }

            };
            DataTable.setModel(model);
            model.addColumn("№");
            model.addColumn("Book Name");
            model.addColumn("Member Name");
            model.addColumn("Staff Name");
            model.addColumn("Borrow Date");
            //model.addColumn("Status");

            //List<Borrow> borrowList = borrowService.getBorrowList();
            for (Borrow borrow : borrowList) {
                Object[] data = new Object[]{
                    borrow.getId(),
                    borrow.getBook().getName(),
                    borrow.getMember().getName() + " " + borrow.getMember().getSurname(),
                    borrow.getStaff().getName() + " " + borrow.getStaff().getSurname(),
                    borrow.getBorrowDate()
                //borrow.getActive()
                };
                model.addRow(data);
            }
            model.fireTableDataChanged();
        } catch (Exception ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

}
