/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.elibrary_project.gui;

import com.mycompany.elibrary_project.model.Book;
import com.mycompany.elibrary_project.model.Borrow;
import com.mycompany.elibrary_project.model.Member;
import com.mycompany.elibrary_project.model.Staff;
import com.mycompany.elibrary_project.service.BookService;
import com.mycompany.elibrary_project.service.BorrowService;
import com.mycompany.elibrary_project.service.MemberService;
import com.mycompany.elibrary_project.service.StaffService;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author user
 */
public class EditBorrowFrame extends javax.swing.JFrame {

    private BorrowService borrowService;
    private BookService bookService;
    private MemberService memberService;
    private StaffService staffService;
    private Long selectedRowId;
    private List<Book> bookList;
    private List<Member> memberList;
    private List<Staff> staffList;

    /**
     * Creates new form EditBorrowFrame
     */
    public EditBorrowFrame(BorrowService borrowService, BookService bookService, MemberService memberService, StaffService staffService, Long selectedRowId) {
        initComponents();
        this.borrowService = borrowService;
        this.bookService = bookService;
        this.memberService = memberService;
        this.staffService = staffService;
        this.selectedRowId = selectedRowId;
        showOldBorrowData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        memberCmb = new javax.swing.JComboBox<>();
        staffCmb = new javax.swing.JComboBox<>();
        updateBtn = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        dateCmb = new com.toedter.calendar.JDateChooser();
        clearBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        bookCmb = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        memberCmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Member" }));

        staffCmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Staff" }));

        updateBtn.setText("Update");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });

        jLabel5.setText("Date");

        clearBtn.setText("Clear");
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });

        jLabel2.setText("Book");

        jLabel3.setText("Member");

        jLabel4.setText("Staff");

        bookCmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Book" }));
        bookCmb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookCmbActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addComponent(updateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(clearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38))
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dateCmb, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(memberCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(staffCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bookCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(63, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bookCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(memberCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(staffCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(54, 54, 54))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        try {
            // Retrieve selected items from combo boxes and date picker
            int bookIndex = bookCmb.getSelectedIndex();
            int memberIndex = memberCmb.getSelectedIndex();
            int staffIndex = staffCmb.getSelectedIndex();
            Date selectedDate = dateCmb.getDate();

            // Validate selections
            if (bookIndex < 0 || memberIndex < 0 || staffIndex < 0 || selectedDate == null) {
                JOptionPane.showMessageDialog(this, "Please fill all fields!", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }

            Book selectedBook = bookList.get(bookIndex);
            Member selectedMember = memberList.get(memberIndex);
            Staff selectedStaff = staffList.get(staffIndex);

            // Build updated Borrow object
            Borrow borrow = new Borrow();
            borrow.setId(selectedRowId); // set ID for update
            borrow.setBook(selectedBook);
            borrow.setMember(selectedMember);
            borrow.setStaff(selectedStaff);
            borrow.setBorrowDate(selectedDate);
            borrow.setActive(1); // still active

            // Perform update
            borrowService.updateBorrow(borrow);

            // Notify user
            JOptionPane.showMessageDialog(this, "Borrow has been successfully updated!");
            this.dispose();

        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error while updating borrow!", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_updateBtnActionPerformed

    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBtnActionPerformed
        bookCmb.setSelectedItem(null);
        memberCmb.setSelectedItem(null);
        staffCmb.setSelectedItem(null);
        dateCmb.setDate(null);
    }//GEN-LAST:event_clearBtnActionPerformed

    private void bookCmbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookCmbActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bookCmbActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> bookCmb;
    private javax.swing.JButton clearBtn;
    private com.toedter.calendar.JDateChooser dateCmb;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JComboBox<String> memberCmb;
    private javax.swing.JComboBox<String> staffCmb;
    private javax.swing.JButton updateBtn;
    // End of variables declaration//GEN-END:variables

    private void showOldBorrowData() {
        try {
            // Get the current borrow record
            Borrow borrow = borrowService.getBorrowById(selectedRowId);

            // Load and populate books
            bookList = bookService.getBookList();
            bookCmb.removeAllItems();
            for (Book book : bookList) {
                bookCmb.addItem(book.getName()); // Display book name
            }
            for (int i = 0; i < bookList.size(); i++) {
                if (bookList.get(i).getId().equals(borrow.getBook().getId())) {
                    bookCmb.setSelectedIndex(i);
                    break;
                }
            }

            // Load and populate members
            memberList = memberService.getMemberList();
            memberCmb.removeAllItems();
            for (Member member : memberList) {
                memberCmb.addItem(member.getName() + " " + member.getSurname());
            }
            for (int i = 0; i < memberList.size(); i++) {
                if (memberList.get(i).getId().equals(borrow.getMember().getId())) {
                    memberCmb.setSelectedIndex(i);
                    break;
                }
            }

            // Load and populate staff
            staffList = staffService.getStaffList();
            staffCmb.removeAllItems();
            for (Staff staff : staffList) {
                staffCmb.addItem(staff.getName() + " " + staff.getSurname());
            }
            for (int i = 0; i < staffList.size(); i++) {
                if (staffList.get(i).getId().equals(borrow.getStaff().getId())) {
                    staffCmb.setSelectedIndex(i);
                    break;
                }
            }

            // Set the borrow date
            dateCmb.setDate(borrow.getBorrowDate());

        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error loading borrow data!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
}
